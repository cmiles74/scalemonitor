package com.nervestaple.scalemonitor.form.datatoolbar;

import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.uiDesigner.core.GridConstraints;

/**
 * Provides a View class for the DataToolbar.
 *
 * @author Christopher Miles
 * @version 1.0
 */
public class DataToolBarView extends JToolBar {

    /**
     * Logger instance.
     */
    private Logger logger = Logger.getLogger(this.getClass());

    /**
     * Data model for the toolbar.
     */
    private DataToolBarModel model;

    /**
     * Icon for the record button.
     */
    private final ImageIcon imageiconRecord = new ImageIcon(getClass().getResource("images/record.png"));

    /**
     * Disabled icon for the record button.
     */
    private final ImageIcon imageiconRecordDisabled = new ImageIcon(getClass().getResource("images/record-disabled.png"));

    /**
     * Icon for the pause button.
     */
    private final ImageIcon imageiconPause = new ImageIcon(getClass().getResource("images/pause.png"));

    /**
     * Disabled icon for the pause button.
     */
    private final ImageIcon imageiconPauseDisabled = new ImageIcon(getClass().getResource("images/pause-disabled.png"));

    // gui objects
    private JPanel panelMain;
    private JButton buttonRecord;
    private JButton buttonPause;

    /**
     * Creates a new DataToolBarView.
     *
     * @param model
     */
    public DataToolBarView(DataToolBarModel model) {

        super();

        // save a reference to the model
        this.model = model;

        setupToolBar();
    }

    public DataToolBarModel getModel() {
        return model;
    }

    public void setRecord(final boolean enabled) {

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                buttonRecord.setEnabled(enabled);
            }
        });
    }

    public void setPause(final boolean enabled) {

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                buttonPause.setEnabled(enabled);
            }
        });
    }

    // private methods

    private void setupToolBar() {

        // setup the buttons
        buttonRecord.setIcon(imageiconRecord);
        buttonRecord.setDisabledIcon(imageiconRecordDisabled);
        buttonRecord.setPressedIcon(imageiconRecordDisabled);
        buttonRecord.setBorderPainted(false);
        buttonPause.setIcon(imageiconPause);
        buttonPause.setDisabledIcon(imageiconPauseDisabled);
        buttonPause.setPressedIcon(imageiconPauseDisabled);
        buttonPause.setBorderPainted(false);

        buttonRecord.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {

                if (model.isRecord()) {
                    model.setRecord(false);
                } else {
                    model.setRecord(true);
                }
            }
        });

        buttonPause.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {

                if (model.isPause()) {
                    model.setPause(false);
                } else {
                    model.setPause(true);
                }
            }
        });

        buttonRecord.setEnabled(!model.isRecord());
        buttonPause.setEnabled(!model.isPause());

        // add the view to the toolbar
        setLayout(new GridLayout(1, 1));
        add(panelMain);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 4, new Insets(3, 10, 3, 10), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panelMain.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panelMain.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 32), new Dimension(-1, 32), new Dimension(-1, 32), 0, false));
        buttonRecord = new JButton();
        buttonRecord.setText("");
        buttonRecord.setToolTipText("Start monitoring scales");
        panelMain.add(buttonRecord, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(32, 32), new Dimension(32, 32), new Dimension(32, 32), 0, false));
        buttonPause = new JButton();
        buttonPause.setText("");
        buttonPause.setToolTipText("Pause monitoring scales");
        panelMain.add(buttonPause, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(32, 32), new Dimension(32, 32), new Dimension(32, 32), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
