package com.nervestaple.scalemonitor.form.portlist;

import com.nervestaple.scalemonitor.form.portlist.portinfo.PortInfoController;
import com.nervestaple.scalemonitor.form.portlist.portinfo.PortInfoView;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;
import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;

/**
 * Provides a view that displays all of the available ports.
 *
 * @author Christopher Miles
 * @version 1.0
 */
public class PortListView extends JPanel {

    /**
     * Logger instance.
     */
    private Logger logger = Logger.getLogger(this.getClass());

    /**
     * Model for this view.
     */
    private PortListModel model;

    /**
     * Column headers.
     */
    private final String[] columnHeaders = new String[]{"Port"};

    /**
     * Box to hold the port controllers.
     */
    private final Box boxControllers = Box.createVerticalBox();

    // gui objects
    private JLabel textfieldHeading;
    private JLabel textfieldSubhead1;
    private JScrollPane scrollpanePorts;
    private JButton buttonAddTestPort;
    private JButton buttonOkay;
    private JPanel panelMain;
    private JPanel panelPorts;

    public PortListView(PortListModel model) {

        super();

        // save a reference
        this.model = model;

        setupPanel();

        initializeListeners();
    }

    public void addNewPortController(final PortInfoView portcontroller) {

        // add the row to the table
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                logger.debug("Adding portcontroller");

                if (boxControllers.getComponentCount() > 0) {
                    boxControllers.remove(boxControllers.getComponentCount() - 1);
                }

                boxControllers.add(portcontroller);
                revalidate();
            }
        });

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                boxControllers.add(Box.createVerticalGlue());
            }
        });
    }

    // private methods

    private void populatePortTable(List ports) {

        logger.debug("Filling port table");
        // get an array of ports
        final PortInfoController[] portcontrollers =
                (PortInfoController[]) ports.toArray(new PortInfoController[ports.size()]);

        // setup the panel
        boxControllers.removeAll();

        // add the ports to the data array
        for (int index = 0; index < portcontrollers.length; index++) {

            final int indexFinal = index;
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {

                    boxControllers.add(portcontrollers[indexFinal].getView());
                }
            });
        }

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                boxControllers.add(Box.createVerticalGlue());
            }
        });
    }

    private void initializeListeners() {

        initializeModelListeners();
        initializeFieldListeners();
    }

    private void initializeFieldListeners() {

        buttonOkay.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (model.getListenerOkay() != null) {
                    model.getListenerOkay().actionPerformed(e);
                }
            }
        });

        buttonAddTestPort.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                if (model.getListenerAddTestPort() != null) {
                    model.getListenerAddTestPort().actionPerformed(event);
                }
            }
        });
    }

    private void initializeModelListeners() {

        model.addPropertyChangeListener("ports", new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent event) {

                populatePortTable((List) event.getNewValue());
            }
        });
    }

    private void setupPanel() {

        panelPorts.setLayout(new GridLayout(1, 1));
        panelPorts.setOpaque(false);
        panelPorts.add(boxControllers);

        setLayout(new GridLayout(1, 1));
        add(panelMain);

        textfieldHeading.setFont(textfieldHeading.getFont().deriveFont(Font.BOLD, 18));
        textfieldSubhead1.setFont(textfieldHeading.getFont().deriveFont(Font.PLAIN, 10));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(5, 5, 5, 5), -1, -1));
        textfieldHeading = new JLabel();
        textfieldHeading.setText("Select Ports to Monitor");
        panelMain.add(textfieldHeading, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(5, 0, 0, 0), -1, -1));
        panelMain.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        textfieldSubhead1 = new JLabel();
        textfieldSubhead1.setText("Check the box to monitor the port. ");
        panel1.add(textfieldSubhead1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonAddTestPort = new JButton();
        buttonAddTestPort.setText("Add a test port");
        panel2.add(buttonAddTestPort, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollpanePorts = new JScrollPane();
        scrollpanePorts.setVerticalScrollBarPolicy(22);
        panel2.add(scrollpanePorts, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 225), null, null, 0, false));
        panelPorts = new JPanel();
        scrollpanePorts.setViewportView(panelPorts);
        buttonOkay = new JButton();
        buttonOkay.setText("Okay");
        panelMain.add(buttonOkay, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
